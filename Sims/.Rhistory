aim2()
sim2
aim2
read_chunk("/Users/annettemolinaro/Respository/Aim2/IntegratingCodeAndText_postAMM.R")
aim2
source('~/Respository/Aim2/IntegratingCodeAndText_postAMM.R')
temp <- aim2(dat=gen.data,nreps=1,n.grid=20,mult=2,outvar="mdev",prop.learning=0.5)
compRob.CVerror<-read.table("friedman1_CompositeRob_ErrorToTruth.txt")
plot(temp$lambdas,temp$Error.lambdas,xlab="lambda",ylab="Optimism corrected error",
main="Optimism corrected error vs. lambda for housing data")
temp <- composite.rpart(dat=gen.data,n.grid=50,mult=4,outvar="mdev")
plot(temp$lambdas,temp$error.lambdas,xlab="lambda",ylab="Optimism corrected error",
main="DC Code: Optimism corrected error vs. lambda for housing data")
lambda.num<-which(temp$error.lambdas==min(temp$error.lambdas))
prp(temp$fits[[ lambda.num]])
test.dat.predicted.fit.resub<-predict(object=temp$fits[[lambda.num]],newdata=gen.data)
error.test.dat.resub <- sum((gen.data$mdev-test.dat.predicted.fit.resub)^2)
temp2 <- composite.rpart.thirds(dat=gen.data,n.grid=20,mult=3,outvar="mdev")
plot(temp2$lambdas,temp2$error.lambdas,xlab="lambda",ylab="Optimism corrected error",
main="Thirds: Optimism corrected error vs. lambda for housing data")
attributes(temp2)
prp(temp2$current.fit.pruned)
test.dat.predicted.fit.resub<-predict(temp2$current.fit.pruned,newdata=gen.data)
error.test.dat.resub <- sum((gen.data$mdev-test.dat.predicted.fit.resub)^2)
error.test.dat.resub
setwd("/Users/annettemolinaro/Respository/Aim2/Sims")
compdc.error<-read.table("friedman1_CompositeDC_ErrorToTruth.txt")
compthirds.error<-read.table("friedman1_CompositeThirds_ErrorToTruth.txt")
compRob.CVerror<-read.table("friedman1_CompositeRob_ErrorToTruth.txt")
compRob.errorU<-read.table("friedman1_CompositeRob_ErrorToTruth.errorU.lambdas.txt")
compRob.Error<-read.table("friedman1_CompositeRob_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
compRob.error<-read.table("friedman1_CompositeRob_ErrorToTruth.error.lambdas.txt")
apply(compdc.error,2,mean)
sqrt(apply(compdc.error,2,var))
#Thirds Method
# Model<-composite.rpart.thirds(dat=training.data.all,n.grid=100,mult=4,outvar="training.y")
apply(compthirds.error,2,mean)
sqrt(apply(compthirds.error,2,var))
#Robs Method
# Model<-composite.rpart.Grid(dat = training.data.all, n.grid =20, mult = 1,
#                                          uplim = 20, outvar = "training.y", prop.learning = 0.5)
# CV Error
apply(compRob.CVerror,2,mean)
sqrt(apply(compRob.CVerror,2,var))
# OpCorr Error
apply(compRob.Error,2,mean)
sqrt(apply(compRob.Error,2,var))
# apparent error with actual responses
apply(compRob.errorU,2,mean)
sqrt(apply(compRob.errorU,2,var))
# apparent error with ci responses
apply(compRob.error,2,mean)
sqrt(apply(compRob.error,2,var))
help(mice)
boxplot(compdc.error,compthirds.error,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error,axes=FALSE,ylab="Average Squared Error",main="Friedman 1")
compdc.error
compthirds.error
compthirds.error
boxplot(compdc.error,compthirds.error,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error,axes=FALSE,ylab="Average Squared Error",main="Friedman 1")
boxplot(compdc.error,compthirds.error,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error,axes=FALSE,ylab="Average Squared Error",main="Friedman 1")
name.vec <- c("DC","Thirds","Rs_CVerror","Rs_OpError","Rs_AppActResp","Rs_AppCIResp")
axis(1,1:length(name.vec),name.vec,las=2)
axis(2)
box()
tabl <- cbind(summary(compdc.error),summary(compthirds.error),summary(compRob.CVerror),summary(compRob.Error),summary(compRob.errorU),summary(compRob.error))
colnames(tabl) <- name.vec
tabl
round(tabl/tabl[,1],2)
tabl[,1]
tabl2 <- round(tabl/tabl[,1],2)
write.table(tabl,paste(friedman,"_table.txt",sep=""),sep="\t",row.names=TRUE,col.names=TRUE,quote=FALSE)
write.table(tabl,"Friedman1_table.txt",sep="\t",row.names=TRUE,col.names=TRUE,quote=FALSE)
tabl
compthirds.error
compdc.error
compRob.CVerror
compRob.Error
compRob.errorU
compRob.error
boxplot(compdc.error,compthirds.error)
library(vioplot)
install.packages("vioplot")
library(vioplot)
vioplot(compdc.error,compthirds.error,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error,axes=FALSE,ylab="Average Squared Error",main="Friedman 1")
vioplot(compdc.error,compthirds.error,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error,ylab="Average Squared Error",main="Friedman 1")
compRob.error
compRob.errorU
compRob.Error
compRob.CVerror
cbind(compdc.error,compthirds.error,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error)
xy<-cbind(compdc.error,compthirds.error,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error)
summary(xy)
boxplot(xy)
boxplot(xy,names=c("DC","Thirds","Rs_CVerror","Rs_OpError","Rs_AppActResp","Rs_AppCIResp"),ylab="Average Squared Error",main="Friedman 1")
xy<-cbind(compdc.error,compthirds.error,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error)
boxplot(xy,names=c("DC","Thirds","Rs_CVerror","Rs_OpError","Rs_AppActResp","Rs_AppCIResp"),ylab="Average Squared Error",main="Friedman 1")
boxplot(xy,names=c("DC","Thirds","R_CV","R_OpErr","R_AppRes","R_AppCI"),ylab="Average Squared Error",main="Friedman 1")
tabl <- cbind(summary(compdc.error),summary(compthirds.error),summary(compRob.CVerror),summary(compRob.Error),summary(compRob.errorU),summary(compRob.error))
tabl
xy<-cbind(compdc.error,compthirds.error,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error)
name.vec <- c("DC","Thirds","R_CV","R_OpErr","R_AppRes","R_AppCI")
boxplot(xy,names=name.vec,ylab="Average Squared Error",main="Friedman 1")
tabl <- cbind(summary(compdc.error),summary(compthirds.error),summary(compRob.CVerror),summary(compRob.Error),summary(compRob.errorU),summary(compRob.error))
colnames(tabl) <- name.vec
write.table(tabl,"Friedman1_table.txt",sep="\t",row.names=TRUE,col.names=TRUE,quote=FALSE)
tabl
print(tabl)
print(tabl)
temp2
temp2 <- composite.rpart.thirds(dat=gen.data,n.grid=100,mult=4,outvar="mdev")
prp(temp2$current.fit.pruned)
test.dat.predicted.fit.resub<-predict(temp2$current.fit.pruned,newdata=gen.data)
error.test.dat.resub <- sum((gen.data$mdev-test.dat.predicted.fit.resub)^2)
error.test.dat.resub
vioplot(xy,names=name.vec,ylab="Average Squared Error",main="Friedman 1")
help(vioplot)
vioplot(xy)
mode(compdc.error)
class(compdc.error)
vioplot(as.vector(compdc.error))
vioplot(as.vector(unlist(compdc.error)))
vioplot(as.vector(unlist(compdc.error)),as.vector(unlist(compthirds.error)),as.vector(unlist(compRob.CVerror)),as.vector(unlist(compRob.Error)),as.vector(unlist(compRob.errorU)),as.vector(unlist(compRob.error)))
vioplot(as.vector(unlist(compdc.error)),as.vector(unlist(compthirds.error)),as.vector(unlist(compRob.CVerror)),as.vector(unlist(compRob.Error)),as.vector(unlist(compRob.errorU)),as.vector(unlist(compRob.error)))
library(xtable)
install.packages("xtable")
knitr::opts_chunk$set(echo = TRUE)
library(vioplot)
setwd("/Users/annettemolinaro/Respository/Aim2/Sims")
compdc.error<-read.table("friedman1_CompositeDC_ErrorToTruth.txt")
compthirds.error<-read.table("friedman1_CompositeThirds_ErrorToTruth.txt")
compRob.CVerror<-read.table("friedman1_CompositeRob_ErrorToTruth.txt")
compRob.errorU<-read.table("friedman1_CompositeRob_ErrorToTruth.errorU.lambdas.txt")
compRob.Error<-read.table("friedman1_CompositeRob_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
compRob.error<-read.table("friedman1_CompositeRob_ErrorToTruth.error.lambdas.txt")
round(tabl,3)
apply(tabl,2,round)
library("R.utils")
library("Rlab")
source("code/sim_models.R")
setwd("~/Respository/Aim2/Sims")
setwd("~/Respository/Aim2/Sims")
source("code/sim_models.R")
model<-cmdArg(model="sim1")
tag <-cmdArg(tag="500")
n.training <- cmdArg(n.training=500L)
n.test <- cmdArg(n.test=1000L)
n.simulations <- cmdArg(n.simulations=1000L)
print(paste("model","=",model))
print(paste("tag","=",tag))
print(paste("n.training","=",n.training))
print(paste("n.test","=",n.test))
print(paste("n.simulations","=",n.simulations))
runmodel <- get(model)
for(i in 1:n.simulations)
{
current.model <- runmodel(n.training=n.training,n.test=n.test,seed=i)
write.table(current.model$training.data,paste("data/",model,"_",tag,"_","training_data_",i,".txt",sep=""),sep="\t",row.names=FALSE,col.names=FALSE,quote=FALSE)
write(current.model$training.y,paste("data/",model,"_",tag,"_","training_y_",i,".txt",sep=""),ncol=1)
write(current.model$training.truth,paste("data/",model,"_",tag,"_","training_truth_",i,".txt",sep=""),ncol=1)
write.table(current.model$test.data,paste("data/",model,"_",tag,"_","test_data_",i,".txt",sep=""),sep="\t",row.names=FALSE,col.names=FALSE,quote=FALSE)
write(current.model$test.y,paste("data/",model,"_",tag,"_","test_y_",i,".txt",sep=""),ncol=1)
write(current.model$test.truth,paste("data/",model,"_",tag,"_","test_truth_",i,".txt",sep=""),ncol=1)
}
compdc.error.500<-read.table("friedman1_500_CompositeDC_ErrorToTruth.txt")
setwd("/Users/annettemolinaro/Respository/Aim2/Sims")
compdc.error.500<-read.table("friedman1_500_CompositeDC_ErrorToTruth.txt")
pwd()
getwd()
compdc.error.500<-read.table("friedman1_500_CompositeDC_ErrorToTruth.txt")
compdc.error.500<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeDC_ErrorToTruth.txt")
summary(compdc.error)
summary(compdc.error.500)
compthirds.error.500<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeThirds_ErrorToTruth.txt")
xy<-cbind(compdc.error.500,compthirds.error.500)#,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error)
name.vec <- c("DC","Thirds")#,"R_CV","R_OpErr","R_AppRes","R_AppCI")
boxplot(xy,names=name.vec,ylab="Average Squared Error",main="Friedman 1")
cbind(summary(compdc.error),summary(compthirds.error))
xy.500<-cbind(compdc.error.500,compthirds.error.500)#,compRob.CVerror,compRob.Error,compRob.errorU,compRob.error)
name.vec <- c("DC","Thirds")#,"R_CV","R_OpErr","R_AppRes","R_AppCI")
boxplot(xy.500,names=name.vec,ylab="Average Squared Error",main="Friedman 1")
cbind(summary(compdc.error.500),summary(compthirds.error.500))
vioplot(as.vector(unlist(compdc.error.500)),as.vector(unlist(compthirds.error.500)))#,as.vector(unlist(compRob.CVerror)),as.vector(unlist(compRob.Error)),as.vector(unlist(compRob.errorU)),as.vector(unlist(compRob.error)),names=name.vec)
source("/Users/annettemolinaro/Respository/Aim2/IntegratingCodeAndText_postAMM.R")
model<-cmdArg(model="sim1")
tag <-cmdArg(tag="500")
n.training <- cmdArg(n.training=500L)
n.test <- cmdArg(n.test=1000L)
n.simulations <- cmdArg(n.simulations=1000L)
name <- paste("data/",model,"_",tag,"_",sep="")
CompositeDC <- paste("CompositeDC/",model,"_",tag,"_",sep="")
idx
idx<-1
set.seed(idx)
training.data <- matrix(scan(paste(name,"training_data_",idx,".txt",sep="")),nrow=n.training,byrow=TRUE)
test.data <- matrix(scan(paste(name,"test_data_",idx,".txt",sep="")),nrow=n.test,byrow=TRUE)
training.y <- scan(paste(name,"training_y_",idx,".txt",sep=""))
test.y <- scan(paste(name,"test_y_",idx,".txt",sep=""))
training.truth <- scan(paste(name,"training_truth_",idx,".txt",sep=""))
test.truth <- scan(paste(name,"test_truth_",idx,".txt",sep=""))
training.data.all<-data.frame(cbind(training.data,training.y))
dimnames(training.data.all)[[2]]<-c("X1","X2","X3","X4","X5","X6","X7","X8","X9","training.y")
dimnames(test.data)[[2]]<-c("X1","X2","X3","X4","X5","X6","X7","X8","X9")
test.data<-as.data.frame(test.data)
system.time(Model<-composite.rpart(dat=training.data.all,n.grid=100,mult=4,outvar="training.y"))
Model$error.lambdas
Model$lambdas
dat=training.data.all
n <- nrow(dat)
which.outcome <- which(colnames(dat)==outvar)
colnames(dat)[which.outcome] <- "outvar.aim2"
#Split into learning and evaluation sets
nlearn <- round(n/3)
ndisc <- round(n/3)
neval <- n-nlearn-ndisc
samp <- sample(1:n,n,replace=FALSE)
#  matrix.lambdas <- matrix(0,3,n.grid)
error.lambdas <- matrix(0,3,n.grid)
# Choose one set of lambdas in the beginning
n1 <- round(n/2)
n2 <- n-n1
samp2 <- sample(1:n,n,replace=FALSE)
which.n1 <- 1:n1
which.n2 <- (n1+1):n
wn1 <- sort(samp[which.n1])
wn2 <- sort(samp[which.n2])
n1.dat <- dat[wn1,]
n2.dat <- dat[wn2,]
outvar="training.y"
n <- nrow(dat)
which.outcome <- which(colnames(dat)==outvar)
colnames(dat)[which.outcome] <- "outvar.aim2"
#Split into learning and evaluation sets
nlearn <- round(n/3)
ndisc <- round(n/3)
neval <- n-nlearn-ndisc
samp <- sample(1:n,n,replace=FALSE)
#  matrix.lambdas <- matrix(0,3,n.grid)
error.lambdas <- matrix(0,3,n.grid)
# Choose one set of lambdas in the beginning
n1 <- round(n/2)
n2 <- n-n1
samp2 <- sample(1:n,n,replace=FALSE)
which.n1 <- 1:n1
which.n2 <- (n1+1):n
wn1 <- sort(samp[which.n1])
wn2 <- sort(samp[which.n2])
n1.dat <- dat[wn1,]
n2.dat <- dat[wn2,]
fit.rf.n1 <- randomForest(outvar.aim2 ~ .,data = n1.dat) # Fit RF with learning set
predict.rf.n2 <- predict(fit.rf.n1,newdata=n2.dat,predict.all=TRUE) #  $\widehat{Z}_{1i}$
mean.n2 <- mean(n2.dat$outvar.aim2) # $\mu_{Z_1}$
var.n2 <- var(n2.dat$outvar.aim2) # $\sigma^2_{Z_1}$
zbarhat <- mean(predict.rf.n2$aggregate) # $ \bar{\hat{Z_1}}$
var.z1s <-  apply(predict.rf.n2$individual,1,var) # $\sigma^2_{\hat{Z_1i}}$
alphas <- 1/var.z1s # $\alpha_i$
# alphas <- alphas/sum(alphas)
alphabar <- mean(alphas) # \bar{\alpha}$
lambda <- var.n2/(ndisc*alphabar*(mean.n2-zbarhat)^2) #with-in node #choice of \lambda
lambda
lambdas <- seq(0,mult*lambda,length.out=n.grid)  # list of possible lambdas
n.grid<-20
lambdas <- seq(0,mult*lambda,length.out=n.grid)  # list of possible lambdas
mult<-4
lambdas <- seq(0,mult*lambda,length.out=n.grid)  # list of possible lambdas
lambdas
n <- nrow(dat)
which.outcome <- which(colnames(dat)==outvar)
colnames(dat)[which.outcome] <- "outvar.aim2"
#Split into learning and evaluation sets
nlearn <- round(prop.learning*n)
neval <- n-nlearn
samp <- sample(1:n,n,replace=FALSE)
wlearn <- sort(samp[1:nlearn])
weval <- sort(samp[(nlearn+1):n])
learning.dat <- dat[wlearn,]
evaluation.dat <- dat[weval,]
prop.learning=0.5
n <- nrow(dat)
which.outcome <- which(colnames(dat)==outvar)
colnames(dat)[which.outcome] <- "outvar.aim2"
#Split into learning and evaluation sets
nlearn <- round(prop.learning*n)
neval <- n-nlearn
samp <- sample(1:n,n,replace=FALSE)
wlearn <- sort(samp[1:nlearn])
weval <- sort(samp[(nlearn+1):n])
learning.dat <- dat[wlearn,]
evaluation.dat <- dat[weval,]
fit.rf.learning <- randomForest(outvar.aim2 ~ .,data = learning.dat,ntree=1000) # Fit RF with learning set
predict.rf.evaluation <- predict(fit.rf.learning,newdata=evaluation.dat,predict.all=TRUE) #  $\widehat{Z}_{1i}$
mean.evaluation <- mean(evaluation.dat$outvar.aim2) # $\mu_{Z_1}$
var.evaluation <- var(evaluation.dat$outvar.aim2) # $\sigma^2_{Z_1}$
zbarhat <- mean(predict.rf.evaluation$aggregate) # $ \bar{\hat{Z_1}}$
var.z1s <-  apply(predict.rf.evaluation$individual,1,var) # $\sigma^2_{\hat{Z_1i}}$
alphas <- 1/var.z1s # $\alpha_i$
alphabar <- mean(alphas) # \bar{\alpha}$
lambda <- var.evaluation/(neval*alphabar*(mean.evaluation-zbarhat)^2) #with-in node
#choice of \lambda
#print(paste("lambda =",lambda))
lambdas <- seq(0,mult*lambda,length.out=n.grid)  # list of possible lambdas
lambda
lambdas
repmat = function(X, m, n) {
if (is.vector(X))
X = matrix(X, length(X), 1)
mx = dim(X)[1]
nx = dim(X)[2]
return(matrix(t(matrix(X, mx, nx * n)), mx * m, nx * n, byrow = T))
}
n <- nrow(dat)
which.outcome <- which(colnames(dat) == outvar)
colnames(dat)[which.outcome] <- "outvar.aim2"
# Split into learning and evaluation sets
nlearn <- round(prop.learning * n)
neval <- n - nlearn
samp <- sample(1:n, n, replace = FALSE)
wlearn <- sort(samp[1:nlearn])
weval <- sort(samp[(nlearn + 1):n])
learning.dat <- dat[wlearn, ]
evaluation.dat <- dat[weval, ]
# use learning set to derive RF predictions
fit.rf.learning <- randomForest(outvar.aim2 ~ ., data = learning.dat,
ntree = 1000)
predict.rf.evaluation <- predict(fit.rf.learning, newdata = evaluation.dat,
predict.all = TRUE)
mean.evaluation <- mean(evaluation.dat$outvar.aim2)  # $\mu_{Z_1}$
var.evaluation <- var(evaluation.dat$outvar.aim2)  # $\sigma^2_{Z_1}$
# mean, variance of RF predictions for evaluation set
zbarhat <- mean(predict.rf.evaluation$aggregate)  # $ \bar{\hat{Z_1}}$
var.z1s <- apply(predict.rf.evaluation$individual, 1, var)  # $\sigma^2_{\hat{Z_1i}}$
alphas <- 1/var.z1s
lambdas <- seq(0, uplim, length.out = n.grid)  # list of possible lambdas
uplim<-10
lambdas <- seq(0, uplim, length.out = n.grid)  # list of possible lambdas
lambdas
compdc.error.500<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeDC_ErrorToTruth.txt")
compthirds.error.500<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeThirds_ErrorToTruth.txt")
compRob.CVerror.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.txt")
compRob.CVerror.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.txt")
compRob.Error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
compRob.errorU.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.errorU.lambdas.txt")
compRob.Error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
setwd("/Users/annettemolinaro/Respository/Aim2/Sims")
compRob.Error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
compRob.Error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
compRob.Error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
pwd
getwd
getwd()
compRob.Error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
compRob.errorU.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.errorU.lambdas.txt")
compRob.error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.error.lambdas.txt")
compRob.CVerror.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.txt")
compRob.errorU.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.errorU.lambdas.txt")
compRob.Error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
compRob.error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.error.lambdas.txt")
compRob.CVerror.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.txt")
compRob.errorU.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.errorU.lambdas.txt")
compRob.Error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
compRob.error.500<-read.table("friedman1_500_CompositeRob_ErrorToTruth.error.lambdas.txt")
xy.500<-cbind(compdc.error.500,compthirds.error.500,compRob.CVerror.500,compRob.Error.500,compRob.errorU.500,compRob.error.500)
length(compRob.CVerror.500)
compRob.CVerror
compRob.CVerror.500
length(compRob.CVerror.500)
unlist(compRob.CVerror.500)
xy.500<-cbind(compdc.error.500,compthirds.error.500,unlist(compRob.CVerror.500),unlist(compRob.Error.500),unlist(compRob.errorU.500),unlist(compRob.error.500))
length(unlist(compRob.CVerror.500))
xy.500<-cbind(compdc.error.500[1:966],compthirds.error.500[1:966],unlist(compRob.CVerror.500),unlist(compRob.Error.500),unlist(compRob.errorU.500),unlist(compRob.error.500))
compdc.error.500[1:966]
compdc.error.500[1:966]
unlist(compdc.error.500)[1:966]
xy.500<-cbind(unlist(compdc.error.500)[1:966],unlist(compthirds.error.500)[1:966],unlist(compRob.CVerror.500),unlist(compRob.Error.500),unlist(compRob.errorU.500),unlist(compRob.error.500))
name.vec <- c("DC","Thirds","R_CV","R_OpErr","R_AppRes","R_AppCI")
boxplot(xy.500,names=name.vec,ylab="Average Squared Error",main="Friedman 1")
vioplot(as.vector(unlist(compdc.error.500)),as.vector(unlist(compthirds.error.500)))#,as.vector(unlist(compRob.CVerror)),as.vector(unlist(compRob.Error)),as.vector(unlist(compRob.errorU)),as.vector(unlist(compRob.error)),names=name.vec)
vioplot(as.vector(unlist(compdc.error.500)),as.vector(unlist(compthirds.error.500)),as.vector(unlist(compRob.CVerror.500)),as.vector(unlist(compRob.Error.500)),as.vector(unlist(compRob.errorU.500)),as.vector(unlist(compRob.error.500)),names=name.vec)
xy.500<-cbind(unlist(compdc.error.500)[1:966],unlist(compthirds.error.500)[1:966],unlist(compRob.CVerror.500),unlist(compRob.Error.500),unlist(compRob.errorU.500),unlist(compRob.error.500))
name.vec <- c("DC","Thirds","R_CV","R_OpErr","R_AppRes","R_AppCI")
boxplot(xy.500,names=name.vec,ylab="Average Squared Error",main="Friedman 1")
vioplot(as.vector(unlist(compdc.error.500)),as.vector(unlist(compthirds.error.500)),as.vector(unlist(compRob.CVerror.500)),as.vector(unlist(compRob.Error.500)),as.vector(unlist(compRob.errorU.500)),as.vector(unlist(compRob.error.500)),names=name.vec)
tabl <- cbind(summary(compdc.error.500),summary(compthirds.error.500),summary(compRob.CVerror.500),summary(compRob.Error.500),summary(compRob.errorU.500),summary(compRob.error.500))
colnames(tabl) <- name.vec
#write.table(tabl,"Friedman1_table.txt",sep="\t",row.names=TRUE,col.names=TRUE,quote=FALSE)
tabl
compdc.error.500.uplim<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeDC_Train500_uplim_ErrorToTruth.txt")
compthirds.error.500.uplim<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeThirds_500_uplim_ErrorToTruth.txt")
compRob.CVerror.500.uplim<-read.table("friedman1_500_CompositeRob_500_uplim_ErrorToTruth.txt")
compRob.CVerror.500.uplim<-read.table("friedman1_500_CompositeRob_500_uplim_ErrorToTruth.txt")
compRob.errorU.500.uplim<-read.table("friedman1_500_CompositeRob_500_uplim_ErrorToTruth.errorU.lambdas.txt")
compRob.Error.500.uplim<-read.table("friedman1_500_CompositeRob_500_uplim_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
compRob.error.500.uplim<-read.table("friedman1_500_CompositeRob_500_uplim_ErrorToTruth.error.lambdas.txt")
length(unlist(compRob.CVerror.500.uplim))
xy.500.uplim<-cbind(unlist(compdc.error.500.uplim)[1:484],unlist(compthirds.error.500.uplim)[1:484],unlist(compRob.CVerror.500.uplim),unlist(compRob.Error.500.uplim),unlist(compRob.errorU.500.uplim),unlist(compRob.error.500.uplim))
name.vec <- c("DC","Thirds","R_CV","R_OpErr","R_AppRes","R_AppCI")
boxplot(xy.500.uplim,names=name.vec,ylab="Average Squared Error",main="Friedman 1")
vioplot(as.vector(unlist(compdc.error.500.uplim)),as.vector(unlist(compthirds.error.500.uplim)),as.vector(unlist(compRob.CVerror.500.uplim)),as.vector(unlist(compRob.Error.500.uplim)),as.vector(unlist(compRob.errorU.500.uplim)),as.vector(unlist(compRob.error.500.uplim)),names=name.vec)
tabl <- cbind(summary(compdc.error.500.uplim),summary(compthirds.error.500.uplim),summary(compRob.CVerror.500.uplim),summary(compRob.Error.500.uplim),summary(compRob.errorU.500.uplim),summary(compRob.error.500.uplim))
colnames(tabl) <- name.vec
#write.table(tabl,"Friedman1_table.txt",sep="\t",row.names=TRUE,col.names=TRUE,quote
system.time(Model<-composite.rpart.thirds(dat=training.data.all,n.grid=100,mult=4,uplim=20,outvar="training.y"))
source('~/Respository/Aim2/IntegratingCodeAndText_postAMM.R')
system.time(Model<-composite.rpart.thirds(dat=training.data.all,n.grid=100,mult=4,uplim=20,outvar="training.y"))
Model$best.lambda
compdc.error.500.uplim.lambda<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeDC_Train500_uplim_MinErrorLambda.txt")
compdc.error.500.uplim.lambda<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeDC_Train500_uplim_MinErrorLambda.txt")
compdc.error.500.uplim.lambda<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeDC_Train500_uplim_MinErrorLambda.txt")
compRob.CVerror.500.uplim.lambda<-read.table("friedman1_500_CompositeRob_500_uplim_MinErrorLambda.txt")
compRob.CVerror.500.uplim.lambda<-read.table("friedman1_500_CompositeRob_500_uplim_MinErrorLambda.txt")
compRob.errorU.500.uplim.lambda<-read.table("friedman1_500_CompositeRob_500_uplim_MinErrorLambda.errorU.lambdas.txt")
compRob.Error.500.uplim.lambda<-read.table("friedman1_500_CompositeRob_500_uplim_MinErrorLambda.ErrorOptimisim.Lambdas.txt")
compRob.error.500.uplim.lambda<-read.table("friedman1_500_CompositeRob_500_uplim_MinErrorLambda.error.lambdas.txt")
lambda.500.uplim<-cbind(unlist(compdc.error.500.uplim.lambda)[1:484],unlist(compthirds.error.500.uplim.lambda)[1:484],unlist(compRob.CVerror.500.uplim.lambda),unlist(compRob.Error.500.uplim.lambda),unlist(compRob.errorU.500.uplim.lambda),unlist(compRob.error.500.uplim.lambda))
lambda.500.uplim<-cbind(unlist(compdc.error.500.uplim.lambda)[1:484],unlist(compRob.CVerror.500.uplim.lambda),unlist(compRob.Error.500.uplim.lambda),unlist(compRob.errorU.500.uplim.lambda),unlist(compRob.error.500.uplim.lambda))
name.vec <- c("DC","R_CV","R_OpErr","R_AppRes","R_AppCI")
boxplot(lambda.500.uplim,names=name.vec,ylab="Average Squared Error",main="Friedman 1")
vioplot(as.vector(unlist(compdc.error.500.uplim.lambda)),as.vector(unlist(compRob.CVerror.500.uplim.lambda)),as.vector(unlist(compRob.Error.500.uplim.lambda)),as.vector(unlist(compRob.errorU.500.uplim.lambda)),as.vector(unlist(compRob.error.500.uplim.lambda)),names=name.vec)
compdc.error.500.uplim<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeDC_Train500_uplim_ErrorToTruth.txt")
compthirds.error.500.uplim<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeThirds_500_uplim_ErrorToTruth.txt")
compRob.CVerror.500.uplim<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeRob_500_uplim_ErrorToTruth.txt")
compRob.errorU.500.uplim<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeRob_500_uplim_ErrorToTruth.errorU.lambdas.txt")
compRob.Error.500.uplim<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeRob_500_uplim_ErrorToTruth.ErrorOptimisim.Lambdas.txt")
compRob.error.500.uplim<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeRob_500_uplim_ErrorToTruth.error.lambdas.txt")
compdc.error.500.uplim.lambda<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeDC_Train500_uplim_MinErrorLambda.txt")
compthirds.error.500.uplim.lambda<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeThirds_500_uplim_MinErrorLambda.txt")
compRob.CVerror.500.uplim.lambda<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeRob_500_uplim_MinErrorLambda.txt")
compRob.errorU.500.uplim.lambda<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeRob_500_uplim_MinErrorLambda.errorU.lambdas.txt")
compRob.Error.500.uplim.lambda<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeRob_500_uplim_MinErrorLambda.ErrorOptimisim.Lambdas.txt")
compRob.error.500.uplim.lambda<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeRob_500_uplim_MinErrorLambda.error.lambdas.txt")
compRob.error.500.uplim.lambda
compdc.error.500.uplim.lambda
compRob.Error.500.uplim.lambda
compthirds.error.500.uplim.lambda
compdc.error.500.uplim.lambda
Model$lambdas[lambda.num]
dim(compdc.error.500)
compdc.error.500<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeDC_ErrorToTruth.txt")
compdc.error.500
compthirds.error.500<-read.table("/Users/annettemolinaro/Respository/Aim2/Sims/friedman1_500_CompositeThirds_ErrorToTruth.txt")
compthirds.error.500
dim(compthirds.error.500)
dim(compdc.error.500)
dim(unlist(compdc.error.500.uplim))
length(unlist(compdc.error.500.uplim))
length(unlist(compRob.CVerror.500.uplim))
xy.500.uplim<-cbind(unlist(compdc.error.500.uplim),unlist(compthirds.error.500.uplim),unlist(compRob.CVerror.500.uplim),unlist(compRob.Error.500.uplim),unlist(compRob.errorU.500.uplim),unlist(compRob.error.500.uplim))
name.vec <- c("DC","Thirds","R_CV","R_OpErr","R_AppRes","R_AppCI")
boxplot(xy.500.uplim,names=name.vec,ylab="Average Squared Error",main="Friedman 1")
vioplot(as.vector(unlist(compdc.error.500.uplim)),as.vector(unlist(compthirds.error.500.uplim)),as.vector(unlist(compRob.CVerror.500.uplim)),as.vector(unlist(compRob.Error.500.uplim)),as.vector(unlist(compRob.errorU.500.uplim)),as.vector(unlist(compRob.error.500.uplim)),names=name.vec)
tabl <- cbind(summary(compdc.error.500.uplim),summary(compthirds.error.500.uplim),summary(compRob.CVerror.500.uplim),summary(compRob.Error.500.uplim),summary(compRob.errorU.500.uplim),summary(compRob.error.500.uplim))
colnames(tabl) <- name.vec
tabl
lambda.500.uplim<-cbind(unlist(compdc.error.500.uplim.lambda),unlist(compRob.CVerror.500.uplim.lambda),unlist(compRob.Error.500.uplim.lambda),unlist(compRob.errorU.500.uplim.lambda),unlist(compRob.error.500.uplim.lambda))
summary(compdc.error.500.uplim)
summary(compthirds.error.500.uplim)
summary(compRob.CVerror.500.uplim)
summary(compRob.Error.500.uplim)
summary(compRob.errorU.500.uplim)
summary(compRob.error.500.uplim)
cbind(summary(compdc.error.500.uplim),summary(compthirds.error.500.uplim),summary(compRob.CVerror.500.uplim),summary(compRob.Error.500.uplim),summary(compRob.errorU.500.uplim),summary(compRob.error.500.uplim))
tabl <- cbind(summary(compdc.error.500.uplim),summary(compthirds.error.500.uplim),summary(compRob.CVerror.500.uplim),summary(compRob.Error.500.uplim),summary(compRob.errorU.500.uplim),summary(compRob.error.500.uplim))
lambda.500.uplim<-cbind(unlist(compdc.error.500.uplim.lambda),unlist(compRob.CVerror.500.uplim.lambda),unlist(compRob.Error.500.uplim.lambda),unlist(compRob.errorU.500.uplim.lambda),unlist(compRob.error.500.uplim.lambda))
unlist(compdc.error.500.uplim.lambda)
tabl
vioplot(as.vector(unlist(compdc.error.500.uplim)),as.vector(unlist(compthirds.error.500.uplim)),as.vector(unlist(compRob.CVerror.500.uplim)),as.vector(unlist(compRob.Error.500.uplim)),as.vector(unlist(compRob.errorU.500.uplim)),as.vector(unlist(compRob.error.500.uplim)),names=name.vec)
cbind(unlist(compdc.error.500.uplim.lambda),unlist(compRob.CVerror.500.uplim.lambda),unlist(compRob.Error.500.uplim.lambda),unlist(compRob.errorU.500.uplim.lambda),unlist(compRob.error.500.uplim.lambda))
cbind(unlist(compRob.CVerror.500.uplim.lambda),unlist(compRob.Error.500.uplim.lambda),unlist(compRob.errorU.500.uplim.lambda),unlist(compRob.error.500.uplim.lambda))
length(unlist(compdc.error.500.uplim.lambda))
length(unlist(compthirds.error.500.uplim.lambda))
lambda.500.uplim<-cbind(unlist(compdc.error.500.uplim.lambda)[1:500],unlist(compthirds.error.500.uplim.lambda),unlist(compRob.CVerror.500.uplim.lambda),unlist(compRob.Error.500.uplim.lambda),unlist(compRob.errorU.500.uplim.lambda),unlist(compRob.error.500.uplim.lambda))
length(unlist(compthirds.error.500.uplim.lambda))
length(unlist(compRob.CVerror.500.uplim.lambda))
length(unlist(compRob.Error.500.uplim.lambda))
length(unlist(compRob.errorU.500.uplim.lambda))
length(unlist(compRob.error.500.uplim.lambda))
compRob.CVerror.500.uplim.lambda
library("R.utils")
library("listenv")
library("future")
source("/Users/annettemolinaro/Respository/Aim2/IntegratingCodeAndText_postAMM.R")
model<-cmdArg(model="sim1")
tag <-cmdArg(tag="500")
n.training <- cmdArg(n.training=500L)
n.test <- cmdArg(n.test=1000L)
n.simulations <- cmdArg(n.simulations=500L)
name <- paste("data/",model,"_",tag,"_",sep="")
CompositeRob <- paste("CompositeRob/",model,"_",tag,"_",sep="")
idx<-1
set.seed(idx)
training.data <- matrix(scan(paste(name,"training_data_",idx,".txt",sep="")),nrow=n.training,byrow=TRUE)
test.data <- matrix(scan(paste(name,"test_data_",idx,".txt",sep="")),nrow=n.test,byrow=TRUE)
training.y <- scan(paste(name,"training_y_",idx,".txt",sep=""))
test.y <- scan(paste(name,"test_y_",idx,".txt",sep=""))
training.truth <- scan(paste(name,"training_truth_",idx,".txt",sep=""))
test.truth <- scan(paste(name,"test_truth_",idx,".txt",sep=""))
training.data.all<-data.frame(cbind(training.data,training.y))
dimnames(training.data.all)[[2]]<-c("X1","X2","X3","X4","X5","X6","X7","X8","X9","training.y")
dimnames(test.data)[[2]]<-c("X1","X2","X3","X4","X5","X6","X7","X8","X9")
test.data<-as.data.frame(test.data)
system.time(Model<-composite.rpart.Grid(dat = training.data.all, n.grid =100, mult = 1,
uplim = 20, outvar = "training.y", prop.learning = 0.5))
lambda.num<-which(Model$CVError.lambdas==min(Model$CVError.lambdas))
MinErrorLambda<-Model$CVError.lambdas[lambda.num]
PredictedValuesCurrent<-predict(object=Model$fits[[lambda.num]],newdata=test.data)
ErrorToTruthCurrent<-(sum(( PredictedValuesCurrent - as.matrix(test.truth))^2))/n.test
MinErrorLambda
Model$CVError.lambdas
help("sequential")
help("seq")
Model$Error.lambdas
Model$errorU.lambdas
Model$error.lambdas
